#===============================================================================
# VERSIONS
kubernetes_version: v1.7.4
kismatic_yum_version: 1.7.4_1-1
kismatic_deb_version: 1.7.4-1
etcd_version: 3.1.10
etcd_yum_version: 3.1.10-1
etcd_apt_version: 3.1.10
transition_etcd_yum_version: 3.0.17-1
transition_etcd_apt_version: 3.0.17
docker_engine_yum_version: 1.12.6-1.el7.centos
docker_engine_apt_version: 1.12.6-0~ubuntu-xenial
helm_version: v2.5.1

cni_version: "v0.5.2"
calico_node_version: "v1.3.0"
calico_ctl_version: "v1.3.0"
calico_cni_version: "v1.9.1"
calico_kube_policy_controller_version: "v0.6.0"
weave_version: "2.0.1"
weave_npc_version: "2.0.1"
contiv_version: "1.1.1"
kubedns_version: "1.14.4"
kube_dnsmasq_version: "1.14.4"
kubedns_sidecar_version: "1.14.4"
kubernetes_dashboard_version: "v1.6.3"
defaultbackend_version: "1.0"
nginx_ingress_controller_version: "0.8.3"
docker_registry_version: "2.6.2"
nginx_version: "stable-alpine"
busybox_version: "latest"
pause_version: "3.0"
apprenda_tcp_healthz_version: "v1.0.0"
heapster_version: "v1.4.0"
influxdb_version: "v1.1.1"
glusterfs_server_version_rhel: "3.8.7-1.el7"
glusterfs_server_version_ubuntu: "3.8.7-ubuntu1~xenial1"
# RHEL needs dash between name-version, Ubuntu needs equals sign between name=version
glusterfs_server_version: "{% if ansible_os_family == 'RedHat' %}-{{ glusterfs_server_version_rhel }}{% elif ansible_os_family == 'Ubuntu' %}={{ glusterfs_server_version_ubuntu }}{% endif %}"
#===============================================================================
# common variables for all hosts
init_system_dir: /etc/systemd/system/
init_system_file_extenstion: service
bin_dir: /usr/bin
#===============================================================================
# service ports
etcd_k8s_client_port: 2379
etcd_networking_client_port: 6666
kubernetes_master_secure_port: 6443
kubernetes_master_insecure_port: 8080
kubernetes_proxy_insecure_port: 10249
kubernetes_scheduler_insecure_port: 10251
kubernetes_controller_mgr_insecure_port: 10252
#===============================================================================
# common variables for etcd
# etcd-certificates
etcd_certificates:
  ca: "{{ etcd_install_dir }}/ca.pem"
  etcd: "{{ etcd_install_dir }}/etcd.pem"
  etcd_key: "{{ etcd_install_dir }}/etcd-key.pem"
  etcd_client: "{{ etcd_install_dir }}/etcd-client.pem"
  etcd_client_key: "{{ etcd_install_dir }}/etcd-client-key.pem"
  owner: root
  group: root
  mode: 0660
# etcd-install
etcd_install_executable_owner: 1000
etcd_install_executable_group: 1000
etcd_install_executable_mode: 0775
etcd_service_owner: root
etcd_service_group: root
etcd_service_mode: 0664
# etcd cluster setup
etcd_service_cluster_string: "{% for host in groups['etcd'] %}{{ host }}=https://{{ hostvars[host]['internal_ipv4'] }}:{{ etcd_service_peer_port }}{% if not loop.last %},{% endif %}{% endfor %}"
#===============================================================================
# docker-install
docker_install_dir: /etc/docker
docker_self_signed_cert_dir: "{{ docker_install_dir }}/certs.d/{{ docker_registry_full_url }}"
docker_service_file: "docker.{{ init_system_file_extenstion }}"
docker_service_path: "{{ init_system_dir }}/{{ docker_service_file }}"
docker_certificates_ca_file_name: ca.pem
docker_certificates_cert_file_name: docker.pem
docker_certificates_key_file_name: docker-key.pem
docker_certificates_cert_path: "{{ docker_install_dir }}/{{ docker_certificates_cert_file_name }}"
docker_certificates_key_path: "{{ docker_install_dir }}/{{ docker_certificates_key_file_name }}"
#===============================================================================
# docker configuration
# docker_direct_lvm_enabled: no default
# docker_direct_lvm_block_device_path: no default
# docker_direct_lvm_deferred_deletion_enabled: no default
docker_device_mapper_thin_pool_autoextend_threshold: 80
docker_device_mapper_thin_pool_autoextend_percent: 20
docker_system_d: /etc/systemd/system/docker.service.d
#===============================================================================
# calico
# directories
calico_dir: /etc/calico
# paths
calicoctl_conf_path: "{{ calico_dir }}/calicoctl.cfg"
#file modes
calico_executable_mode: 0775
# weave
weave_dir: /etc/weave
#networking
kubernetes_dns_service_addr: https://{{kubernetes_dns_service_ip}}:{{kubernetes_master_secure_port}}
#===============================================================================
# contiv
contiv:
  certs:
    proxy_server_key_filename: "contiv-proxy-server-key.pem"
    proxy_server_cert_filename: "contiv-proxy-server.pem"
  dir: 
    config: /etc/contiv
    var: /var/contiv
  proxy_server_certs_secret_name: "contiv-proxy-server-certs"
  vlan_iface: ""
#===============================================================================
# kubernetes
# directories
kubernetes_install_dir: /etc/kubernetes
kubernetes_spec_dir: /etc/kubernetes/specs
network_plugin_dir: /etc/cni/net.d
kubernetes_auth_dir: /etc/kubernetes/auth
kubelet_lib_dir: /var/lib/kubelet
kubelet_pod_manifests_dir: /etc/kubernetes/manifests
kubelet_pod_manifests_backup_dir: /etc/kubernetes/manifests-backup
kubernetes_kubectl_config_dir: /root/.kube
# paths
kubernetes_basic_auth_path: "{{kubernetes_auth_dir}}/basicauth.csv"
kubernetes_authorization_policy_path: "{{kubernetes_auth_dir}}/authorization-policy.json"
kubernetes_services_kubeconfig_path: "{{kubelet_lib_dir}}/kubeconfig"
kubernetes_kubeconfig_path: "{{kubernetes_kubectl_config_dir}}/config" 

kubernetes_kubeconfig:
  kubectl: "{{kubernetes_kubectl_config_dir}}/config"
  controller_manager: "{{kubernetes_install_dir}}/controller-manager.conf"
  scheduler: "{{kubernetes_install_dir}}/scheduler.conf"
  kubelet: "{{kubernetes_install_dir}}/kubelet.conf"
  kube_proxy: "{{kubernetes_install_dir}}/kube-proxy.conf"

# file modes
kubernetes_executable_mode: 0775
kubernetes_service_mode: 0664
kubernetes_certificates_mode: 0660
docker_certificate_mode: 0660
network_environment_mode: 0660
# owner/group
kubernetes_owner: root
kubernetes_group: root
kubernetes_certificates_owner: root
kubernetes_certificates_group: root
docker_certificates_owner: root
docker_certificates_group: root
# kubernetes cluster config
kubernetes_master_apiserver_count: "{{ groups['master'] | length }}"
local_kubernetes_master_ip: https://127.0.0.1:{{ kubernetes_master_secure_port }}
kubernetes_master_ip: https://{{ kubernetes_load_balanced_fqdn }}:{{ kubernetes_master_secure_port }}
kubernetes_schedulable: "{% if 'worker' in group_names %}true{% else %}false{% endif %}"
kube_dns_replicas: "{{ [2, groups['worker'] | length] | min }}"
# cloud provider
cloud_config: "{% if cloud_config_local is defined and cloud_config_local != '' %}{{ kubernetes_install_dir }}/cloud_config{% else %}{% endif %}"

# kubernetes certificate config
# TODO: Do we want to change this?
kubernetes_certificates_dir: "{{ kubernetes_install_dir }}/pki" 
kubernetes_certificates:
  ca: "{{ kubernetes_certificates_dir }}/ca.pem"
  api_server: "{{ kubernetes_certificates_dir }}/api-server.pem"
  api_server_key: "{{ kubernetes_certificates_dir }}/api-server-key.pem"
  etcd_client: "{{ kubernetes_certificates_dir }}/etcd-client.pem"
  etcd_client_key: "{{ kubernetes_certificates_dir }}/etcd-client-key.pem"
  controller_manager: "{{ kubernetes_certificates_dir }}/controller-manager.pem"
  controller_manager_key: "{{ kubernetes_certificates_dir }}/controller-manager-key.pem"
  scheduler: "{{ kubernetes_certificates_dir }}/scheduler.pem"
  scheduler_key: "{{ kubernetes_certificates_dir }}/scheduler-key.pem"
  kubelet: "{{ kubernetes_certificates_dir }}/kubelet.pem"
  kubelet_key: "{{ kubernetes_certificates_dir }}/kubelet-key.pem"
  kube_proxy: "{{ kubernetes_certificates_dir }}/kube-proxy.pem"
  kube_proxy_key: "{{ kubernetes_certificates_dir }}/kube-proxy-key.pem"
  service_account: "{{ kubernetes_certificates_dir }}/service-account.pem"
  service_account_key: "{{ kubernetes_certificates_dir }}/service-account-key.pem"

kubernetes_api_server_option_defaults:
  "admission-control": "NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,ResourceQuota"
  "advertise-address":  "{{ internal_ipv4 }}"
  "allow-privileged": "true"
  "apiserver-count":  "{{ kubernetes_master_apiserver_count }}"
  "anonymous-auth": "false"
  "authorization-mode": "RBAC,ABAC"
  "authorization-policy-file":  "{{ kubernetes_authorization_policy_path }}"
  "basic-auth-file":  "{{ kubernetes_basic_auth_path }}"
  "bind-address": "0.0.0.0"
  "client-ca-file":  "{{ kubernetes_certificates.ca }}"
  "cloud-provider": "{{ cloud_provider | quote }}"
  "cloud-config": "{{ cloud_config }}"
  "enable-swagger-ui": "true"
  "etcd-cafile":  "{{ kubernetes_certificates.ca }}"
  "etcd-certfile":  "{{ kubernetes_certificates.etcd_client }}"
  "etcd-keyfile":  "{{ kubernetes_certificates.etcd_client_key }}"
  "etcd-servers":  "{{ etcd_k8s_cluster_ip_list }}"
  "insecure-bind-address": "127.0.0.1"
  "insecure-port": "{{ kubernetes_master_insecure_port }}"
  "kubelet-preferred-address-types": "{% if modify_hosts_file is defined and modify_hosts_file|bool == true %}InternalIP,ExternalIP,Hostname{% endif %}"
  "runtime-config": "extensions/v1beta1=true,extensions/v1beta1/networkpolicies=true"
  "secure-port": "{{ kubernetes_master_secure_port }}"
  "service-account-key-file":  "{{ kubernetes_certificates.service_account_key }}"
  "service-cluster-ip-range":  "{{ kubernetes_services_cidr }}"
  "tls-cert-file":  "{{ kubernetes_certificates.api_server }}"
  "tls-private-key-file":  "{{ kubernetes_certificates.api_server_key }}"
  "v": "2"


# etcd IPs
etcd_networking_cluster_ip_list: "{% for host in groups['etcd'] %}https://{{ host }}:{{ etcd_networking_client_port }}{% if not loop.last %},{% endif %}{% endfor %}"
etcd_k8s_cluster_ip_list: "{% for host in groups['etcd'] %}https://{{ host }}:{{ etcd_k8s_client_port }}{% if not loop.last %},{% endif %}{% endfor %}"

#===============================================================================
docker_registry_full_url: "{{ docker_registry_address }}:{{ docker_registry_port }}"
load_private_images: "{{ configure_docker_with_private_registry is defined and configure_docker_with_private_registry|bool == true and disconnected_installation is defined and disconnected_installation|bool == true }}"

kube_proxy_orig_img: gcr.io/google-containers/kube-proxy-amd64:{{kubernetes_version}}
kube_proxy_priv_img: "{{ docker_registry_full_url }}/{{ kube_proxy_orig_img }}"
kube_proxy_img: '{% if load_private_images|bool == true %}{{ kube_proxy_priv_img }}{% else %}{{ kube_proxy_orig_img }}{% endif %}'

kube_controller_manager_orig_img: gcr.io/google-containers/kube-controller-manager-amd64:{{kubernetes_version}}
kube_controller_manager_priv_img: "{{ docker_registry_full_url }}/{{ kube_controller_manager_orig_img }}"
kube_controller_manager_img: '{% if load_private_images|bool == true %}{{ kube_controller_manager_priv_img }}{% else %}{{ kube_controller_manager_orig_img }}{% endif %}'

kube_scheduler_orig_img: gcr.io/google-containers/kube-scheduler-amd64:{{kubernetes_version}}
kube_scheduler_priv_img: "{{ docker_registry_full_url }}/{{ kube_scheduler_orig_img }}"
kube_scheduler_img: '{% if load_private_images|bool == true %}{{ kube_scheduler_priv_img }}{% else %}{{ kube_scheduler_orig_img }}{% endif %}'

kube_apiserver_orig_img: gcr.io/google-containers/kube-apiserver-amd64:{{kubernetes_version}}
kube_apiserver_priv_img: "{{ docker_registry_full_url }}/{{ kube_apiserver_orig_img }}"
kube_apiserver_img: '{% if load_private_images|bool == true %}{{ kube_apiserver_priv_img }}{% else %}{{ kube_apiserver_orig_img }}{% endif %}'

calico_node_orig_img: calico/node:{{calico_node_version}}
calico_node_priv_img: "{{ docker_registry_full_url }}/{{ calico_node_orig_img }}"
calico_node_img: '{% if load_private_images|bool == true %}{{ calico_node_priv_img }}{% else %}{{ calico_node_orig_img }}{% endif %}'

calico_ctl_orig_img: calico/ctl:{{calico_ctl_version}}
calico_ctl_priv_img: "{{ docker_registry_full_url }}/{{ calico_ctl_orig_img }}"
calico_ctl_img: '{% if load_private_images|bool == true %}{{ calico_ctl_priv_img }}{% else %}{{ calico_ctl_orig_img }}{% endif %}'

calico_cni_orig_img: calico/cni:{{calico_cni_version}}
calico_cni_priv_img: "{{ docker_registry_full_url }}/{{ calico_cni_orig_img }}"
calico_cni_img: '{% if load_private_images|bool == true %}{{ calico_cni_priv_img }}{% else %}{{ calico_cni_orig_img }}{% endif %}'

calico_kube_policy_controller_orig_img: calico/kube-policy-controller:{{ calico_kube_policy_controller_version }}
calico_kube_policy_controller_priv_img: "{{ docker_registry_full_url }}/{{ calico_kube_policy_controller_orig_img }}"
calico_kube_policy_controller_img: '{% if load_private_images|bool == true %}{{ calico_kube_policy_controller_priv_img }}{% else %}{{ calico_kube_policy_controller_orig_img }}{% endif %}'

cni_bin_orig_img: apprenda/cni-bin:{{ cni_version }}
cni_bin_priv_img: "{{ docker_registry_full_url }}/{{ cni_bin_orig_img }}"
cni_bin_img: '{% if load_private_images|bool == true %}{{ cni_bin_priv_img }}{% else %}{{ cni_bin_orig_img }}{% endif %}'

contiv_netplugin_orig_img: contiv/netplugin:{{ contiv_version }}
contiv_netplugin_priv_img: "{{ docker_registry_full_url }}/{{ contiv_netplugin_orig_img }}"
contiv_netplugin_img: '{% if load_private_images|bool == true %}{{ contiv_netplugin_priv_img }}{% else %}{{ contiv_netplugin_orig_img }}{% endif %}'

weave_orig_img: weaveworks/weave-kube:{{ weave_version }}
weave_priv_img: "{{ docker_registry_full_url }}/{{ weave_orig_img }}"
weave_img: '{% if load_private_images|bool == true %}{{ weave_priv_img }}{% else %}{{ weave_orig_img }}{% endif %}'

weave_npc_orig_img: weaveworks/weave-npc:{{ weave_npc_version }}
weave_npc_priv_img: "{{ docker_registry_full_url }}/{{ weave_npc_orig_img }}"
weave_npc_img: '{% if load_private_images|bool == true %}{{ weave_npc_priv_img }}{% else %}{{ weave_npc_orig_img }}{% endif %}'

defaultbackend_orig_img: gcr.io/google_containers/defaultbackend:{{ defaultbackend_version }}
defaultbackend_priv_img: "{{ docker_registry_full_url }}/{{ defaultbackend_orig_img }}"
defaultbackend_img: '{% if load_private_images|bool == true %}{{ defaultbackend_priv_img }}{% else %}{{ defaultbackend_orig_img }}{% endif %}'

nginx_ingress_controller_orig_img: gcr.io/google_containers/nginx-ingress-controller:{{ nginx_ingress_controller_version }}
nginx_ingress_controller_priv_img: "{{ docker_registry_full_url }}/{{ nginx_ingress_controller_orig_img }}"
nginx_ingress_controller_img: '{% if load_private_images|bool == true %}{{ nginx_ingress_controller_priv_img }}{% else %}{{ nginx_ingress_controller_orig_img }}{% endif %}'

nginx_orig_img: nginx:{{ nginx_version }}
nginx_priv_img: "{{ docker_registry_full_url }}/{{ nginx_orig_img }}"
nginx_img: '{% if load_private_images|bool == true %}{{ nginx_priv_img }}{% else %}{{ nginx_orig_img }}{% endif %}'

busybox_orig_img: busybox:{{ busybox_version }}
busybox_priv_img: "{{ docker_registry_full_url }}/{{ busybox_orig_img }}"
busybox_img: '{% if load_private_images|bool == true %}{{ busybox_priv_img }}{% else %}{{ busybox_orig_img }}{% endif %}'

pause_orig_img: gcr.io/google_containers/pause-amd64:{{ pause_version }}
pause_priv_img: "{{ docker_registry_full_url }}/{{ pause_orig_img }}"
pause_img: '{% if load_private_images|bool == true %}{{ pause_priv_img }}{% else %}{{ pause_orig_img }}{% endif %}'

kubedns_orig_img: gcr.io/google_containers/k8s-dns-kube-dns-amd64:{{ kubedns_version }}
kubedns_priv_img: "{{ docker_registry_full_url }}/{{ kubedns_orig_img }}"
kubedns_img: '{% if load_private_images|bool == true %}{{ kubedns_priv_img }}{% else %}{{ kubedns_orig_img }}{% endif %}'

kube_dnsmasq_orig_img: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:{{ kube_dnsmasq_version }}
kube_dnsmasq_priv_img: "{{ docker_registry_full_url }}/{{ kube_dnsmasq_orig_img }}"
kube_dnsmasq_img: '{% if load_private_images|bool == true %}{{ kube_dnsmasq_priv_img }}{% else %}{{ kube_dnsmasq_orig_img }}{% endif %}'

kubedns_sidecar_orig_img: gcr.io/google_containers/k8s-dns-sidecar-amd64:{{ kubedns_sidecar_version }}
kubedns_sidecar_priv_img: "{{ docker_registry_full_url }}/{{ kubedns_sidecar_orig_img }}"
kubedns_sidecar_img: '{% if load_private_images|bool == true %}{{ kubedns_sidecar_priv_img }}{% else %}{{ kubedns_sidecar_orig_img }}{% endif %}'

kubernetes_dashboard_orig_img: gcr.io/google_containers/kubernetes-dashboard-amd64:{{ kubernetes_dashboard_version }}
kubernetes_dashboard_priv_img: "{{ docker_registry_full_url }}/{{ kubernetes_dashboard_orig_img }}"
kubernetes_dashboard_img: '{% if load_private_images|bool == true %}{{ kubernetes_dashboard_priv_img }}{% else %}{{ kubernetes_dashboard_orig_img }}{% endif %}'

apprenda_tcp_healthz_orig_img: apprenda/tcp-healthz-amd64:{{ apprenda_tcp_healthz_version }}
apprenda_tcp_healthz_priv_img: "{{ docker_registry_full_url }}/{{ apprenda_tcp_healthz_orig_img }}"
apprenda_tcp_healthz_img: "{% if load_private_images|bool == true %}{{ apprenda_tcp_healthz_priv_img }}{% else %}{{ apprenda_tcp_healthz_orig_img }}{% endif %}"

helm_orig_img: gcr.io/kubernetes-helm/tiller:{{ helm_version }}
helm_priv_img: "{{ docker_registry_full_url }}/{{ helm_orig_img }}"
helm_img: "{% if load_private_images|bool == true %}{{ helm_priv_img }}{% else %}{{ helm_orig_img }}{% endif %}"

heapster_orig_img: gcr.io/google_containers/heapster-amd64:{{ heapster_version }}
heapster_priv_img: "{{ docker_registry_full_url }}/{{ heapster_orig_img }}"
heapster_img: "{% if load_private_images|bool == true %}{{ heapster_priv_img }}{% else %}{{ heapster_orig_img }}{% endif %}"

influxdb_orig_img: gcr.io/google_containers/heapster-influxdb-amd64:{{ influxdb_version }}
influxdb_priv_img: "{{ docker_registry_full_url }}/{{ influxdb_orig_img }}"
influxdb_img: "{% if load_private_images|bool == true %}{{ influxdb_priv_img }}{% else %}{{ influxdb_orig_img }}{% endif %}"

# kismatic packages
yum_repository_url: https://kismatic-packages-rpm.s3-accelerate.amazonaws.com
yum_gpg_key_url: https://kismatic-packages-rpm.s3-accelerate.amazonaws.com/public.key
deb_repository_url: https://kismatic-packages-deb.s3-accelerate.amazonaws.com
deb_gpg_key_url: https://kismatic-packages-deb.s3-accelerate.amazonaws.com/public.key

# Uncomment below to use test repo
# yum_repository_url: https://kismatic-packages-rpm-test.s3-accelerate.amazonaws.com
# yum_gpg_key_url: https://kismatic-packages-rpm-test.s3-accelerate.amazonaws.com/public.key
# deb_repository_url: https://kismatic-packages-deb-test.s3-accelerate.amazonaws.com
# deb_gpg_key_url: https://kismatic-packages-deb-test.s3-accelerate.amazonaws.com/public.key
#===============================================================================
# PV configs for monitoring and logging
#pv_monitoring_nfs_server_ip: "192.168.99.20"
#pv_monitoring_nfs_dir: "/kubernetes/monitoring"
#pv_monitoring_storage_size: "10Gi"
#pv_logging_nfs_server_ip: "192.168.99.20"
#pv_logging_nfs_dir: "/kubernetes/logging"
#pv_logging_storage_size: "10Gi"
#===============================================================================

# Preflight check variables
preflight_check_tcp_ports: "{{etcd_k8s_client_port}},{{etcd_networking_client_port}},{{kubernetes_master_secure_port}},{{kubernetes_master_insecure_port}}"

# Gluster
volume_mount: /
volume_base_dir: data/
volume_mode: 0777
volume_replica_count: 2
volume_distribution_count: 1
